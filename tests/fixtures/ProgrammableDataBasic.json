{"abi":[{"type":"function","name":"getStorage","inputs":[],"outputs":[{"name":"","type":"bytes","internalType":"bytes"}],"stateMutability":"view"},{"type":"function","name":"readByteRange","inputs":[{"name":"byte_range_index","type":"uint8","internalType":"uint8"},{"name":"start_offset","type":"uint32","internalType":"uint32"},{"name":"length","type":"uint32","internalType":"uint32"}],"outputs":[{"name":"success","type":"bool","internalType":"bool"},{"name":"data","type":"bytes","internalType":"bytes"}],"stateMutability":"view"},{"type":"function","name":"readByteRange","inputs":[{"name":"byte_range_index","type":"uint8","internalType":"uint8"}],"outputs":[{"name":"success","type":"bool","internalType":"bool"},{"name":"data","type":"bytes","internalType":"bytes"}],"stateMutability":"view"},{"type":"function","name":"readBytes","inputs":[{"name":"relative_offset","type":"uint32","internalType":"uint32"},{"name":"length","type":"uint32","internalType":"uint32"}],"outputs":[{"name":"success","type":"bool","internalType":"bool"},{"name":"result","type":"bytes","internalType":"bytes"}],"stateMutability":"view"},{"type":"function","name":"readBytes","inputs":[],"outputs":[{"name":"success","type":"bool","internalType":"bool"},{"name":"data","type":"bytes","internalType":"bytes"}],"stateMutability":"view"},{"type":"function","name":"readPdChunkIntoStorage","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"storedData","inputs":[],"outputs":[{"name":"","type":"bytes","internalType":"bytes"}],"stateMutability":"view"}],"bytecode":{"object":"0x6080604052348015600f57600080fd5b506106f38061001f6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063819a78181161005b578063819a7818146100c9578063a98ce76d146100dc578063d98b5568146100ef578063dcaf27c0146100f757600080fd5b80631660d3f8146100825780632a1afcd9146100ac5780633408f73a146100c1575b600080fd5b610095610090366004610426565b610101565b6040516100a39291906104b9565b60405180910390f35b6100b46101b4565b6040516100a391906104dc565b6100b4610242565b6100956100d73660046104f6565b6102d4565b6100956100ea366004610511565b610363565b61009561037e565b6100ff610394565b005b604051600160f81b60208201526001600160f81b031960f885901b1660218201526001600160e01b031960e084811b8216602284015283901b16602682015260009060609061050090602a0160408051601f198184030181529082905261016791610544565b600060405180830381855afa9150503d80600081146101a2576040519150601f19603f3d011682016040523d82523d6000602084013e6101a7565b606091505b5091509150935093915050565b600080546101c190610560565b80601f01602080910402602001604051908101604052809291908181526020018280546101ed90610560565b801561023a5780601f1061020f5761010080835404028352916020019161023a565b820191906000526020600020905b81548152906001019060200180831161021d57829003601f168201915b505050505081565b60606000805461025190610560565b80601f016020809104026020016040519081016040528092919081815260200182805461027d90610560565b80156102ca5780601f1061029f576101008083540402835291602001916102ca565b820191906000526020600020905b8154815290600101906020018083116102ad57829003601f168201915b5050505050905090565b6040516000602082018190526001600160f81b031960f884901b166021830152906060906105009060220160408051601f198184030181529082905261031991610544565b600060405180830381855afa9150503d8060008114610354576040519150601f19603f3d011682016040523d82523d6000602084013e610359565b606091505b5091509150915091565b6000606061037360008585610101565b915091509250929050565b6000606061038c60006102d4565b915091509091565b60008061039f61037e565b91509150816103eb5760405162461bcd60e51b81526020600482015260146024820152731c9958591a5b99c8189e5d195cc819985a5b195960621b604482015260640160405180910390fd5b60006103f782826105fe565b505050565b803560ff8116811461040d57600080fd5b919050565b803563ffffffff8116811461040d57600080fd5b60008060006060848603121561043b57600080fd5b610444846103fc565b925061045260208501610412565b915061046060408501610412565b90509250925092565b60005b8381101561048457818101518382015260200161046c565b50506000910152565b600081518084526104a5816020860160208601610469565b601f01601f19169290920160200192915050565b82151581526040602082015260006104d4604083018461048d565b949350505050565b6020815260006104ef602083018461048d565b9392505050565b60006020828403121561050857600080fd5b6104ef826103fc565b6000806040838503121561052457600080fd5b61052d83610412565b915061053b60208401610412565b90509250929050565b60008251610556818460208701610469565b9190910192915050565b600181811c9082168061057457607f821691505b60208210810361059457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b601f8211156103f757806000526020600020601f840160051c810160208510156105d75750805b601f840160051c820191505b818110156105f757600081556001016105e3565b5050505050565b815167ffffffffffffffff8111156106185761061861059a565b61062c816106268454610560565b846105b0565b6020601f82116001811461066057600083156106485750848201515b600019600385901b1c1916600184901b1784556105f7565b600084815260208120601f198516915b828110156106905787850151825560209485019460019092019101610670565b50848210156106ae5786840151600019600387901b60f8161c191681555b50505050600190811b0190555056fea2646970667358221220bbe93f1b3d6671e17969e2d81e109d0f4e3db9e9bfa79fe32838888c557c4e8464736f6c634300081a0033","sourceMap":"92:402:0:-:0;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063819a78181161005b578063819a7818146100c9578063a98ce76d146100dc578063d98b5568146100ef578063dcaf27c0146100f757600080fd5b80631660d3f8146100825780632a1afcd9146100ac5780633408f73a146100c1575b600080fd5b610095610090366004610426565b610101565b6040516100a39291906104b9565b60405180910390f35b6100b46101b4565b6040516100a391906104dc565b6100b4610242565b6100956100d73660046104f6565b6102d4565b6100956100ea366004610511565b610363565b61009561037e565b6100ff610394565b005b604051600160f81b60208201526001600160f81b031960f885901b1660218201526001600160e01b031960e084811b8216602284015283901b16602682015260009060609061050090602a0160408051601f198184030181529082905261016791610544565b600060405180830381855afa9150503d80600081146101a2576040519150601f19603f3d011682016040523d82523d6000602084013e6101a7565b606091505b5091509150935093915050565b600080546101c190610560565b80601f01602080910402602001604051908101604052809291908181526020018280546101ed90610560565b801561023a5780601f1061020f5761010080835404028352916020019161023a565b820191906000526020600020905b81548152906001019060200180831161021d57829003601f168201915b505050505081565b60606000805461025190610560565b80601f016020809104026020016040519081016040528092919081815260200182805461027d90610560565b80156102ca5780601f1061029f576101008083540402835291602001916102ca565b820191906000526020600020905b8154815290600101906020018083116102ad57829003601f168201915b5050505050905090565b6040516000602082018190526001600160f81b031960f884901b166021830152906060906105009060220160408051601f198184030181529082905261031991610544565b600060405180830381855afa9150503d8060008114610354576040519150601f19603f3d011682016040523d82523d6000602084013e610359565b606091505b5091509150915091565b6000606061037360008585610101565b915091509250929050565b6000606061038c60006102d4565b915091509091565b60008061039f61037e565b91509150816103eb5760405162461bcd60e51b81526020600482015260146024820152731c9958591a5b99c8189e5d195cc819985a5b195960621b604482015260640160405180910390fd5b60006103f782826105fe565b505050565b803560ff8116811461040d57600080fd5b919050565b803563ffffffff8116811461040d57600080fd5b60008060006060848603121561043b57600080fd5b610444846103fc565b925061045260208501610412565b915061046060408501610412565b90509250925092565b60005b8381101561048457818101518382015260200161046c565b50506000910152565b600081518084526104a5816020860160208601610469565b601f01601f19169290920160200192915050565b82151581526040602082015260006104d4604083018461048d565b949350505050565b6020815260006104ef602083018461048d565b9392505050565b60006020828403121561050857600080fd5b6104ef826103fc565b6000806040838503121561052457600080fd5b61052d83610412565b915061053b60208401610412565b90509250929050565b60008251610556818460208701610469565b9190910192915050565b600181811c9082168061057457607f821691505b60208210810361059457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b601f8211156103f757806000526020600020601f840160051c810160208510156105d75750805b601f840160051c820191505b818110156105f757600081556001016105e3565b5050505050565b815167ffffffffffffffff8111156106185761061861059a565b61062c816106268454610560565b846105b0565b6020601f82116001811461066057600083156106485750848201515b600019600385901b1c1916600184901b1784556105f7565b600084815260208120601f198516915b828110156106905787850151825560209485019460019092019101610670565b50848210156106ae5786840151600019600387901b60f8161c191681555b50505050600190811b0190555056fea2646970667358221220bbe93f1b3d6671e17969e2d81e109d0f4e3db9e9bfa79fe32838888c557c4e8464736f6c634300081a0033","sourceMap":"92:402:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3401:488:2;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;149:23:0;;;:::i;:::-;;;;;;;:::i;401:91::-;;;:::i;2189:397:2:-;;;;;;:::i;:::-;;:::i;1357:201::-;;;;;;:::i;:::-;;:::i;689:115::-;;;:::i;179:216:0:-;;;:::i;:::-;;3401:488:2;3661:207;;-1:-1:-1;;;3661:207:2;;;2382:39:3;-1:-1:-1;;;;;;3695:31:2;3748:24;;;2450:26:3;2437:11;;;2430:47;-1:-1:-1;;;;;;3794:20:2;;;;2506:33:3;;2493:11;;;2486:54;3836:14:2;;;2569:33:3;2556:11;;;2549:54;3535:12:2;;3549:17;;112:5:1;;2619:12:3;;3661:207:2;;;-1:-1:-1;;3661:207:2;;;;;;;;;;3597:285;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3578:304;;;;3401:488;;;;;;:::o;149:23:0:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;401:91::-;444:12;475:10;468:17;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;401:91;:::o;2189:397:2:-;2439:126;;2271:12;2439:126;;;3472:39:3;;;-1:-1:-1;;;;;;2473:28:2;2523:24;;;3540:26:3;3527:11;;;3520:47;2271:12:2;2285:17;;112:5:1;;3583:11:3;;2439:126:2;;;-1:-1:-1;;2439:126:2;;;;;;;;;;2375:204;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2314:265;;;;2189:397;;;:::o;1357:201::-;1458:12;1472:19;1510:41;1524:1;1527:15;1544:6;1510:13;:41::i;:::-;1503:48;;;;1357:201;;;;;:::o;689:115::-;731:12;745:17;781:16;795:1;781:13;:16::i;:::-;774:23;;;;689:115;;:::o;179:216:0:-;231:12;245:17;266:11;:9;:11::i;:::-;230:47;;;;295:7;287:40;;;;-1:-1:-1;;;287:40:0;;3807:2:3;287:40:0;;;3789:21:3;3846:2;3826:18;;;3819:30;-1:-1:-1;;;3865:18:3;;;3858:50;3925:18;;287:40:0;;;;;;;;371:10;:17;384:4;371:10;:17;:::i;:::-;;220:175;;179:216::o;14:156:3:-;80:20;;140:4;129:16;;119:27;;109:55;;160:1;157;150:12;109:55;14:156;;;:::o;175:163::-;242:20;;302:10;291:22;;281:33;;271:61;;328:1;325;318:12;343:326;416:6;424;432;485:2;473:9;464:7;460:23;456:32;453:52;;;501:1;498;491:12;453:52;524:27;541:9;524:27;:::i;:::-;514:37;;570;603:2;592:9;588:18;570:37;:::i;:::-;560:47;;626:37;659:2;648:9;644:18;626:37;:::i;:::-;616:47;;343:326;;;;;:::o;674:250::-;759:1;769:113;783:6;780:1;777:13;769:113;;;859:11;;;853:18;840:11;;;833:39;805:2;798:10;769:113;;;-1:-1:-1;;916:1:3;898:16;;891:27;674:250::o;929:270::-;970:3;1008:5;1002:12;1035:6;1030:3;1023:19;1051:76;1120:6;1113:4;1108:3;1104:14;1097:4;1090:5;1086:16;1051:76;:::i;:::-;1181:2;1160:15;-1:-1:-1;;1156:29:3;1147:39;;;;1188:4;1143:50;;929:270;-1:-1:-1;;929:270:3:o;1204:298::-;1387:6;1380:14;1373:22;1362:9;1355:41;1432:2;1427;1416:9;1412:18;1405:30;1336:4;1452:44;1492:2;1481:9;1477:18;1469:6;1452:44;:::i;:::-;1444:52;1204:298;-1:-1:-1;;;;1204:298:3:o;1507:217::-;1654:2;1643:9;1636:21;1617:4;1674:44;1714:2;1703:9;1699:18;1691:6;1674:44;:::i;:::-;1666:52;1507:217;-1:-1:-1;;;1507:217:3:o;1729:182::-;1786:6;1839:2;1827:9;1818:7;1814:23;1810:32;1807:52;;;1855:1;1852;1845:12;1807:52;1878:27;1895:9;1878:27;:::i;1916:256::-;1982:6;1990;2043:2;2031:9;2022:7;2018:23;2014:32;2011:52;;;2059:1;2056;2049:12;2011:52;2082:28;2100:9;2082:28;:::i;:::-;2072:38;;2129:37;2162:2;2151:9;2147:18;2129:37;:::i;:::-;2119:47;;1916:256;;;;;:::o;2642:287::-;2771:3;2809:6;2803:13;2825:66;2884:6;2879:3;2872:4;2864:6;2860:17;2825:66;:::i;:::-;2907:16;;;;;2642:287;-1:-1:-1;;2642:287:3:o;2934:380::-;3013:1;3009:12;;;;3056;;;3077:61;;3131:4;3123:6;3119:17;3109:27;;3077:61;3184:2;3176:6;3173:14;3153:18;3150:38;3147:161;;3230:10;3225:3;3221:20;3218:1;3211:31;3265:4;3262:1;3255:15;3293:4;3290:1;3283:15;3147:161;;2934:380;;;:::o;3954:127::-;4015:10;4010:3;4006:20;4003:1;3996:31;4046:4;4043:1;4036:15;4070:4;4067:1;4060:15;4211:517;4312:2;4307:3;4304:11;4301:421;;;4348:5;4345:1;4338:16;4392:4;4389:1;4379:18;4462:2;4450:10;4446:19;4443:1;4439:27;4433:4;4429:38;4498:4;4486:10;4483:20;4480:47;;;-1:-1:-1;4521:4:3;4480:47;4576:2;4571:3;4567:12;4564:1;4560:20;4554:4;4550:31;4540:41;;4631:81;4649:2;4642:5;4639:13;4631:81;;;4708:1;4694:16;;4675:1;4664:13;4631:81;;;4635:3;;4211:517;;;:::o;4904:1295::-;5028:3;5022:10;5055:18;5047:6;5044:30;5041:56;;;5077:18;;:::i;:::-;5106:96;5195:6;5155:38;5187:4;5181:11;5155:38;:::i;:::-;5149:4;5106:96;:::i;:::-;5251:4;5282:2;5271:14;;5299:1;5294:648;;;;5986:1;6003:6;6000:89;;;-1:-1:-1;6055:19:3;;;6049:26;6000:89;-1:-1:-1;;4861:1:3;4857:11;;;4853:24;4849:29;4839:40;4885:1;4881:11;;;4836:57;6102:81;;5264:929;;5294:648;4158:1;4151:14;;;4195:4;4182:18;;-1:-1:-1;;5330:20:3;;;5447:222;5461:7;5458:1;5455:14;5447:222;;;5543:19;;;5537:26;5522:42;;5650:4;5635:20;;;;5603:1;5591:14;;;;5477:12;5447:222;;;5451:3;5697:6;5688:7;5685:19;5682:201;;;5758:19;;;5752:26;-1:-1:-1;;5841:1:3;5837:14;;;5853:3;5833:24;5829:37;5825:42;5810:58;5795:74;;5682:201;-1:-1:-1;;;;5929:1:3;5913:14;;;5909:22;5896:36;;-1:-1:-1;4904:1295:3:o","linkReferences":{}},"methodIdentifiers":{"getStorage()":"3408f73a","readByteRange(uint8)":"819a7818","readByteRange(uint8,uint32,uint32)":"1660d3f8","readBytes()":"d98b5568","readBytes(uint32,uint32)":"a98ce76d","readPdChunkIntoStorage()":"dcaf27c0","storedData()":"2a1afcd9"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getStorage\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"byte_range_index\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"start_offset\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"length\",\"type\":\"uint32\"}],\"name\":\"readByteRange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"byte_range_index\",\"type\":\"uint8\"}],\"name\":\"readByteRange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"relative_offset\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"length\",\"type\":\"uint32\"}],\"name\":\"readBytes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readBytes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readPdChunkIntoStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storedData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"readByteRange(uint8)\":{\"custom:precompile\":\"Calls PD_READ_PRECOMPILE_ADDRESS with READ_FULL_BYTE_RANGE operation\",\"details\":\"Note that \\\"by index\\\" means the index in the list of ByteRanges, from the access list with all other types filtered out.\",\"params\":{\"byte_range_index\":\"The index of the BytesRange in the access list to read from (0-255)\"},\"returns\":{\"data\":\"The complete bytes from the specified BytesRange. If success is false, this will be empty\",\"success\":\"Boolean indicating whether the read operation was successful\"}},\"readByteRange(uint8,uint32,uint32)\":{\"custom:precompile\":\"Calls PD_READ_PRECOMPILE_ADDRESS with READ_PARTIAL_BYTE_RANGE operation\",\"details\":\"Note that \\\"by index\\\" means the index in the list of ByteRanges, from the access list with all other types filtered out.\",\"params\":{\"byte_range_index\":\"The index of the BytesRange in the access list to read from (0-255)\",\"length\":\"The number of bytes to read from the BytesRange\",\"start_offset\":\"The starting position within the BytesRange to begin reading, in bytes\"},\"returns\":{\"data\":\"The bytes that were read from the BytesRange. If success is false, this will be empty\",\"success\":\"Boolean indicating whether the read operation was successful\"}},\"readBytes()\":{\"details\":\"Convenience method that calls readByteRange(0) to read the entire first range\",\"returns\":{\"data\":\"The complete bytes from the first BytesRange. If success is false, this will be empty\",\"success\":\"Boolean indicating whether the read operation was successful\"}},\"readBytes(uint32,uint32)\":{\"details\":\"Convenience method that calls readByteRange(0, offset, length)\",\"params\":{\"length\":\"The number of bytes to read from the BytesRange\",\"relative_offset\":\"The starting position within the BytesRange to begin reading, in bytes\"},\"returns\":{\"result\":\"The bytes that were read from the BytesRange. If success is false, this will be empty\",\"success\":\"Boolean indicating whether the read operation was successful\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"readByteRange(uint8)\":{\"notice\":\"Reads all bytes from a specified (by index) BytesRange in the access list\"},\"readByteRange(uint8,uint32,uint32)\":{\"notice\":\"Reads a specified number of bytes from a specified (by index) BytesRange in the access list\"},\"readBytes()\":{\"notice\":\"Reads all bytes from the first BytesRange in the access list\"},\"readBytes(uint32,uint32)\":{\"notice\":\"Reads a specified number of bytes from the first BytesRange in the access list\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/IrysProgrammableDataBasic.sol\":\"ProgrammableDataBasic\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"src/IrysProgrammableDataBasic.sol\":{\"keccak256\":\"0xcfa66b399f7b3c6baf9d067c0cffcb4951daaa68d2cdf9f0a0e32fdc8c373076\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://506641fda38f990b45e6538bb7152b1dd8c617783a49db47fdaf78575299ee4b\",\"dweb:/ipfs/QmZzcRZGHb6WnyoJJnPWsEJ4hNs4g2uXUpfgcCRUEFaCYG\"]},\"src/Precompiles.sol\":{\"keccak256\":\"0xbf0975b6dace576d0bef5544daf8483ba5107bd0cba9212e818d8f3a942ade2c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a799d0925459a3c1d2028af22421ee5ae8bf540863a8cf7bb98de37732d7d45d\",\"dweb:/ipfs/QmcRBmR45EJpbZsbLaN6koPm5bEwc2o3SYDDuKATFyZz2x\"]},\"src/ProgrammableData.sol\":{\"keccak256\":\"0x9c76782ba0d86174bf05f0baceb98ec70bd4bfa6ee8bfbd3818fd3ca935264b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://14713cb3c2027c2133991a033d261669fd9fa1dd49b366100bb5b7e169d510ae\",\"dweb:/ipfs/QmSikmiZ5PvFfLWZNdsEv8Vh7kJgMWX6e4Z2hWP5Lt8FGM\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.26+commit.8a97fa7a"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"view","type":"function","name":"getStorage","outputs":[{"internalType":"bytes","name":"","type":"bytes"}]},{"inputs":[{"internalType":"uint8","name":"byte_range_index","type":"uint8"},{"internalType":"uint32","name":"start_offset","type":"uint32"},{"internalType":"uint32","name":"length","type":"uint32"}],"stateMutability":"view","type":"function","name":"readByteRange","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}]},{"inputs":[{"internalType":"uint8","name":"byte_range_index","type":"uint8"}],"stateMutability":"view","type":"function","name":"readByteRange","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}]},{"inputs":[{"internalType":"uint32","name":"relative_offset","type":"uint32"},{"internalType":"uint32","name":"length","type":"uint32"}],"stateMutability":"view","type":"function","name":"readBytes","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"result","type":"bytes"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"readBytes","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"readPdChunkIntoStorage"},{"inputs":[],"stateMutability":"view","type":"function","name":"storedData","outputs":[{"internalType":"bytes","name":"","type":"bytes"}]}],"devdoc":{"kind":"dev","methods":{"readByteRange(uint8)":{"custom:precompile":"Calls PD_READ_PRECOMPILE_ADDRESS with READ_FULL_BYTE_RANGE operation","details":"Note that \"by index\" means the index in the list of ByteRanges, from the access list with all other types filtered out.","params":{"byte_range_index":"The index of the BytesRange in the access list to read from (0-255)"},"returns":{"data":"The complete bytes from the specified BytesRange. If success is false, this will be empty","success":"Boolean indicating whether the read operation was successful"}},"readByteRange(uint8,uint32,uint32)":{"custom:precompile":"Calls PD_READ_PRECOMPILE_ADDRESS with READ_PARTIAL_BYTE_RANGE operation","details":"Note that \"by index\" means the index in the list of ByteRanges, from the access list with all other types filtered out.","params":{"byte_range_index":"The index of the BytesRange in the access list to read from (0-255)","length":"The number of bytes to read from the BytesRange","start_offset":"The starting position within the BytesRange to begin reading, in bytes"},"returns":{"data":"The bytes that were read from the BytesRange. If success is false, this will be empty","success":"Boolean indicating whether the read operation was successful"}},"readBytes()":{"details":"Convenience method that calls readByteRange(0) to read the entire first range","returns":{"data":"The complete bytes from the first BytesRange. If success is false, this will be empty","success":"Boolean indicating whether the read operation was successful"}},"readBytes(uint32,uint32)":{"details":"Convenience method that calls readByteRange(0, offset, length)","params":{"length":"The number of bytes to read from the BytesRange","relative_offset":"The starting position within the BytesRange to begin reading, in bytes"},"returns":{"result":"The bytes that were read from the BytesRange. If success is false, this will be empty","success":"Boolean indicating whether the read operation was successful"}}},"version":1},"userdoc":{"kind":"user","methods":{"readByteRange(uint8)":{"notice":"Reads all bytes from a specified (by index) BytesRange in the access list"},"readByteRange(uint8,uint32,uint32)":{"notice":"Reads a specified number of bytes from a specified (by index) BytesRange in the access list"},"readBytes()":{"notice":"Reads all bytes from the first BytesRange in the access list"},"readBytes(uint32,uint32)":{"notice":"Reads a specified number of bytes from the first BytesRange in the access list"}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/IrysProgrammableDataBasic.sol":"ProgrammableDataBasic"},"evmVersion":"paris","libraries":{}},"sources":{"src/IrysProgrammableDataBasic.sol":{"keccak256":"0xcfa66b399f7b3c6baf9d067c0cffcb4951daaa68d2cdf9f0a0e32fdc8c373076","urls":["bzz-raw://506641fda38f990b45e6538bb7152b1dd8c617783a49db47fdaf78575299ee4b","dweb:/ipfs/QmZzcRZGHb6WnyoJJnPWsEJ4hNs4g2uXUpfgcCRUEFaCYG"],"license":"MIT"},"src/Precompiles.sol":{"keccak256":"0xbf0975b6dace576d0bef5544daf8483ba5107bd0cba9212e818d8f3a942ade2c","urls":["bzz-raw://a799d0925459a3c1d2028af22421ee5ae8bf540863a8cf7bb98de37732d7d45d","dweb:/ipfs/QmcRBmR45EJpbZsbLaN6koPm5bEwc2o3SYDDuKATFyZz2x"],"license":"MIT"},"src/ProgrammableData.sol":{"keccak256":"0x9c76782ba0d86174bf05f0baceb98ec70bd4bfa6ee8bfbd3818fd3ca935264b9","urls":["bzz-raw://14713cb3c2027c2133991a033d261669fd9fa1dd49b366100bb5b7e169d510ae","dweb:/ipfs/QmSikmiZ5PvFfLWZNdsEv8Vh7kJgMWX6e4Z2hWP5Lt8FGM"],"license":"MIT"}},"version":1},"id":0}